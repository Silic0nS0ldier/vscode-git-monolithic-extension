"""
Rollup bundle rule.
"""

load("@aspect_rules_js//js:defs.bzl", "js_run_binary")

def _rollup_bundle(name, srcs, entry_points, external_modules, **kwargs):
    # type: (string, list[string], list[string], list[string]) -> None
    args = ["--out-dir", name + "_"]
    outs = []

    # Handle entry points
    for entry_point in entry_points:
        args.append("--entry-point")
        args.append(entry_point)

        # TODO This is hacky
        outs.append("%s_/%s" % (name, entry_point.replace("dist/", "")))

    # Handle external modules
    for external_module in external_modules:
        args.append("--external-module")
        args.append(external_module)

    # Remove `None` values generated by `macro`
    clean_kwargs = {}
    for key, value in kwargs.items():
        if value != None:
            clean_kwargs[key] = value

    js_run_binary(
        name = name,
        tool = "//build_defs/rollup_bundle:bin",
        args = args,
        srcs = srcs,
        outs = outs,
        out_dirs = ["%s_/chunks" % name],
        chdir = native.package_name(),
        mnemonic = "RollupBundle",
        # Removes an intermediary `_js_library` target that may fail to find toolchains
        use_execroot_entry_point = False,
        **clean_kwargs
    )

rollup_bundle = macro(
    implementation = _rollup_bundle,
    inherit_attrs = "common",
    attrs = {
        "srcs": attr.label_list(
            mandatory = True,
            allow_files = True,
            doc = "Source files to be considered for bundle inclusion.",
        ),
        "entry_points": attr.string_list(
            mandatory = True,
            configurable = False,
            doc = "Roots from which to start bundling.",
        ),
        "external_modules": attr.string_list(
            configurable = False,
            doc = "External modules that should not (or can not) be bundled.",
        ),
    },
    doc = """
        Create a JS bundle using an opinionated Rollup configuration.Create a JS bundle using an opinionated Rollup configuration.
    """,
)
